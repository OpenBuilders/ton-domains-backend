import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import * as TonWeb from 'tonweb';
import { ConfigService } from '@nestjs/config';
import { DnsCollection } from 'tonweb/src/contract/dns/DnsCollection';
import {
  createOffchainUriCell,
  parseAddress,
} from 'tonweb/src/contract/token/nft/NftUtils';
import { Address } from 'ton3';

const TonWebTs = TonWeb as any;
const TonWebHttpProvider = TonWebTs.HttpProvider as any;
const TonWebCell = TonWebTs.boc.Cell as any;
const TonWebBN = TonWebTs.utils.BN as any;
const TonWebAddress = TonWebTs.utils.Address as any;

@Injectable()
export class TonwebService implements OnModuleInit {
  /**
   * @var tonweb Tonweb
   * @private
   */
  private tonweb: any;
  private dnsCollection: any;
  private DNS_ITEM_CODE_HEX =


  constructor(private readonly configService: ConfigService) {}

  private static async getIndexByName(domain: string) {
    const cellTest = new TonWebCell();
    cellTest.bits.writeString(domain);

    return TonWebTs.utils.bytesToHex(await cellTest.hash());
  }

  async onModuleInit(): Promise<any> {
    const tonCenterToken = this.configService.get('app.toncenter.token');
    this.tonweb = new TonWebTs(
      new TonWebHttpProvider(this.configService.get('app.toncenter.endpoint'), {
        apiKey: tonCenterToken,
      }),
    );

    const auctionAddress = this.configService.get(
      'app.blockchain.walletAuction',
    );
    this.dnsCollection = new DnsCollection(this.tonweb.provider, {
      address: auctionAddress,
      collectionContent: createOffchainUriCell(
        'https://dns.ton.org/collection.json',
      ),
      code: TonWebCell.oneFromBoc(

      ),
      dnsItemCodeHex: this.DNS_ITEM_CODE_HEX,
    });
  }

  async getDnsDataByAddress(address: string) {
    const formattedAddress = new Address(address).toString();
    const nftData = await this.tonweb.provider.call2(
      formattedAddress,
      'get_nft_data',
    );

    const isInitialized = nftData[0].toNumber() === -1;
    const index = nftData[1];
    const collectionAddress = parseAddress(nftData[2]).toString(
      true,
      true,
      true,
    );

    let ownerAddress = null;

    try {
      ownerAddress = new TonWebAddress(parseAddress(nftData[3])).toString(
        true,
        true,
        true,
      );
    } catch (err) {
      Logger.debug('[BC] Error while parsing ownerAddres of nft DATA');
    }
    const contentCell = nftData[4];
    let auction: {
      maxBidAddress: string;
      maxBidAmount: string;
      auctionEndTime: string;
    } = null;

    if (isInitialized && !ownerAddress) {
      try {
        auction = await this.parseAuction(formattedAddress).catch((err) => {
          Logger.error('Error while parsing Auction info', {
            err: err,
          });
          return null;
        });
        ownerAddress = auction ? auction?.maxBidAddress : ownerAddress; // Temporary owner on auction. Bot will skip if user wallet owned
      } catch (err) {
        Logger.error('Auction parse failed', {
          err: err,
        });
      }
    }

    if (auction?.maxBidAddress == null) {
      auction = null;
    }

    return {
      isInitialized,
      index,
      collectionAddress,
      ownerAddress,
      contentCell,
      auction,
    };
  }

  async parseAuction(address: string) {
    const auctionInfo = await this.tonweb.provider
      .call2(address, 'get_auction_info')
      .catch((err) => {
        Logger.error('Error while calling - get_auction_info', {
          err: err,
        });
        return null;
      });

    if (auctionInfo == null || auctionInfo[1] == '00') {
      return null;
    }

    let maxBidAddress = null;
    try {
      maxBidAddress = new TonWebAddress(parseAddress(auctionInfo[0])).toString(
        true,
        true,
        true,
      );
    } catch (err) {
      Logger.error('Failed when try to parse MaxBid address');
    }
    const maxBidAmount = auctionInfo[1].toString();
    const auctionEndTime = auctionInfo[2].toNumber();

    return { maxBidAddress, maxBidAmount, auctionEndTime };
  }

  async getAddressByName(domain: string) {
    const index = await TonwebService.getIndexByName(domain);
    if (!index) return null;

    return (
      await this.dnsCollection.getNftItemAddressByIndex(new TonWebBN(index, 16))
    ).toString(true, true, true);
  }

  async getAccountState(address: string) {
    return await this.tonweb.provider.getAddressInfo(address);
  }

  async getLastTransactions(
    address,
    limit = 20,
    fromLT = undefined,
    hash = undefined,
  ) {
    return await this.tonweb.getTransactions(address, limit, fromLT, hash);
  }
}
